{"version":3,"sources":["Libs/http.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/Banner/index.jsx","components/Banner/Banner.module.scss","components/CreatePost/CreatePost.module.scss","components/CreatePost/index.jsx","pages/NewPost/index.jsx"],"names":["BASE_URL","http","resource","fetch","then","response","json","httpPost","data","method","headers","body","JSON","stringify","httpDelete","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Banner","color","text","style","backgroundColor","className","styles","banner","module","exports","CreatePost","useState","authorInput","setAuthorInput","imgInput","setImgInput","messageInput","setMessageInput","formPostObj","setFormPostObj","changeBanner","setChangeBanner","useEffect","author","date","Date","toISOString","photo","createpost","__author","value","onChange","e","target","type","name","id","placeholder","required","onClick","event","preventDefault","setTimeout","cols","rows","NewPost"],"mappings":"mNACMA,EAAW,yCAEXC,EAAO,SAACC,GAAD,OAAcC,MAAMH,EAAWE,GACzCE,MAAK,SAACC,GAAD,OAAcA,EAASC,WAEzBC,EAAW,SAACL,EAAUM,GAAX,OACfL,MAAMH,EAAWE,EAAU,CACzBO,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUL,KACpBJ,MAAK,SAACC,GAAD,OAAcA,EAASC,WAE3BQ,EAAa,SAACZ,GAAD,OACjBC,MAAMH,EAAWE,EAAU,CACzBO,OAAQ,SACRC,QAAS,CACP,eAAgB,sBAEjBN,MAAK,SAACC,GAAD,OAAcA,EAASC,Y,wFCjBlB,SAASS,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,K,gCIL9F,4BAWeC,IATA,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,KAEpB,OACI,qBAAKC,MAAO,CAACC,gBAAiBH,GAAQI,UAAWC,IAAOC,OAAxD,SACI,6BAAKL,Q,mBCLjBM,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,SAAW,+B,iGCuF1DC,EAlFI,WAEf,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAwCJ,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KACA,EAAsCN,mBAAS,IAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KAOA,EAAwCR,oBAAS,GAAjD,mBAAOS,EAAP,KAAqBC,EAArB,KA0BA,OAXAC,qBAAU,WAENH,EAAe,CACXI,OAAQX,EACRV,KAAMc,EACNQ,MAAM,IAAIC,MAAOC,cACjBC,MAAOb,MAGZ,CAACF,EAAaE,EAAUE,IAGvB,qBAAKX,UAAWC,IAAOsB,WAAvB,SACI,iCACI,sBAAKvB,UAAWC,IAAOuB,SAAvB,UACI,uBACIC,MAAOlB,EACPmB,SAAU,SAACC,GAAD,OAAOnB,EAAemB,EAAEC,OAAOH,QACzCI,KAAK,OACLC,KAAK,SACLC,GAAG,SACHC,YAAY,SACZC,UAAQ,IAEZ,uBACIR,MAAOhB,EACPiB,SAAU,SAACC,GAAD,OAAOjB,EAAYiB,EAAEC,OAAOH,QACtCI,KAAK,OACLC,KAAK,MACLC,GAAG,MACHC,YAAY,YAEhB,wBAAQE,QA5CF,SAACC,GACnBA,EAAMC,iBACN7D,YAAS,SAAUsC,GAEnBG,GAAgB,GAChBqB,YAAW,WACPrB,GAAgB,KACjB,MAqCyCa,KAAK,SAArC,kBACCd,GAAgB,cAACpB,EAAA,EAAD,CAAQC,MAAM,QAAQC,KAAK,qBAGhD,0BACI4B,MAAOd,EACPe,SAAU,SAACC,GAAD,OAAOf,EAAgBe,EAAEC,OAAOH,QAC1CK,KAAK,UACLC,GAAG,UACHO,KAAK,KACLC,KAAK,KACLP,YAAY,UACZC,UAAQ,UCrEbO,UANC,WACZ,OACI,cAAC,EAAD","file":"static/js/6.f051afc0.chunk.js","sourcesContent":["\nconst BASE_URL = \"https://edgemony-backend.herokuapp.com\";\n\nconst http = (resource) => fetch(BASE_URL + resource)\n  .then((response) => response.json());\n\nconst httpPost = (resource, data) =>\n  fetch(BASE_URL + resource, {\n    method: 'POST',\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  }).then((response) => response.json());\n\nconst httpDelete = (resource) =>\n  fetch(BASE_URL + resource, {\n    method: 'DELETE',\n    headers: {\n      \"content-type\": \"application/json\",\n    },\n  }).then((response) => response.json());\n\nconst fillFriendsList = (friendsNames) => {\n  let value = 0;\n  for (value in [...Array(friendsNames.length).keys()]) {\n    httpPost(\"/friends\", {\n      name: friendsNames[value],\n      photo: `https://randomuser.me/api/portraits/men/${value}.jpg`,\n    });\n\n    setTimeout(() => { }, 100);\n  }\n};\n\nexport { http, httpPost, httpDelete, fillFriendsList };","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import styles from \"./Banner.module.scss\"\n\nconst Banner = ({color, text}) => {\n\n    return (\n        <div style={{backgroundColor: color}} className={styles.banner}>\n            <h3>{text}</h3>\n        </div>\n    )\n}\n\nexport default Banner;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"banner\":\"Banner_banner__Lcs5E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"createpost\":\"CreatePost_createpost__ja3xu\",\"__author\":\"CreatePost___author__2lcbm\"};","import { useState, useEffect } from \"react\";\nimport { httpPost } from \"../../Libs/http\";\nimport Banner from '../Banner';\n\nimport styles from \"./CreatePost.module.scss\";\n\nconst CreatePost = () => {\n\n    const [authorInput, setAuthorInput] = useState(\"\");\n    const [imgInput, setImgInput] = useState(\"\");\n    const [messageInput, setMessageInput] = useState(\"\");\n    const [formPostObj, setFormPostObj] = useState({})\n\n    // const handleAuthorInput = (event) => setAuthorInput(event.target.value);\n    // const handleimgInput = (event) => setImgInput(event.target.value);\n    // const handlemessageInput = (event) => setMessageInput(event.target.value);\n\n\n    const [changeBanner, setChangeBanner] = useState(false);\n\n\n    const handleSendBtn = (event) => {\n        event.preventDefault();\n        httpPost(\"/posts\", formPostObj);\n\n        setChangeBanner(true);\n        setTimeout(() => {\n            setChangeBanner(false);\n        }, 3000);\n    };\n\n\n\n    useEffect(() => {\n\n        setFormPostObj({\n            author: authorInput,\n            text: messageInput,\n            date: new Date().toISOString(),\n            photo: imgInput,\n        });\n\n    }, [authorInput, imgInput, messageInput]);\n\n    return (\n        <div className={styles.createpost}>\n            <form>\n                <div className={styles.__author}>\n                    <input\n                        value={authorInput}\n                        onChange={(e) => setAuthorInput(e.target.value)}\n                        type=\"text\"\n                        name=\"author\"\n                        id=\"author\"\n                        placeholder=\"Author\"\n                        required\n                    />\n                    <input\n                        value={imgInput}\n                        onChange={(e) => setImgInput(e.target.value)}\n                        type=\"text\"\n                        name=\"img\"\n                        id=\"img\"\n                        placeholder=\"Img URL\"\n                    />\n                    <button onClick={handleSendBtn} type=\"submit\">SEND</button>\n                    {changeBanner && <Banner color=\"green\" text=\"Post aggiunto\" />}\n\n                </div>\n                <textarea\n                    value={messageInput}\n                    onChange={(e) => setMessageInput(e.target.value)}\n                    name=\"message\"\n                    id=\"message\"\n                    cols=\"30\"\n                    rows=\"10\"\n                    placeholder=\"Message\"\n                    required >\n                </textarea>\n\n\n\n\n            </form>\n        </div>\n    );\n};\n\nexport default CreatePost;","import CreatePost from \"../../components/CreatePost\";\n\nconst NewPost = () => {\n    return(\n        <CreatePost />\n    )\n}\n\nexport default NewPost;"],"sourceRoot":""}